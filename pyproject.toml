[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "k-scrape-nexus"
version = "1.0.0"
description = "Enterprise-grade, hyper-scalable web scraping platform"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "K-Scrape Nexus Team", email = "team@k-scrape-nexus.com"}
]
maintainers = [
    {name = "K-Scrape Nexus Team", email = "team@k-scrape-nexus.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["web-scraping", "kubernetes", "microservices", "asyncio", "fastapi"]
requires-python = ">=3.11"

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # HTTP client and scraping
    "httpx>=0.25.0",
    "playwright>=1.40.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "cssselect>=1.2.0",
    "crawl4ai>=0.7.0",
    
    # Database and migrations
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    
    # Queue and cache
    "redis>=5.0.0",
    "celery>=5.3.0",
    
    # Data processing
    "pandas>=2.1.0",
    "polars>=0.20.0",
    "numpy>=1.25.0",
    
    # Storage
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    
    # Observability
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "opentelemetry-instrumentation-redis>=0.42b0",
    "opentelemetry-instrumentation-httpx>=0.42b0",
    "opentelemetry-exporter-prometheus>=1.12.0rc1",
    "opentelemetry-exporter-jaeger>=1.21.0",
    
    # Security and validation
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    
    # Utilities
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "httpx[test]>=0.25.0",
    "faker>=20.1.0",
    
    # Code quality
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    
    # Development tools
    "ipython>=8.17.0",
    "ipdb>=0.13.13",
    "watchdog>=3.0.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

production = [
    # Production WSGI server
    "gunicorn>=21.2.0",
    
    # Performance monitoring
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
]

kubernetes = [
    # Kubernetes client
    "kubernetes>=28.1.0",
    "kubernetes-asyncio>=28.2.0",
]

[project.urls]
Homepage = "https://github.com/k-scrape-nexus/k-scrape-nexus"
Documentation = "https://k-scrape-nexus.readthedocs.io/"
Repository = "https://github.com/k-scrape-nexus/k-scrape-nexus"
"Bug Tracker" = "https://github.com/k-scrape-nexus/k-scrape-nexus/issues"
Changelog = "https://github.com/k-scrape-nexus/k-scrape-nexus/blob/main/CHANGELOG.md"

[project.scripts]
k-scrape = "scraper_lib.cli:main"

[tool.setuptools.packages.find]
where = ["services"]
include = ["*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.sql", "*.html", "*.css", "*.js"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B018", "S101"]

[tool.ruff.isort]
known-first-party = ["scraper_lib"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "redis.*",
    "celery.*",
    "boto3.*",
    "botocore.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "services/*/tests",
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["services"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"