# GitHub Actions CI/CD Pipeline for K-Scrape Nexus
# Complete workflow with build, test, security scan, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  PROJECT_NAME: k-scrape-nexus

jobs:
  # Validation jobs
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate YAML files
      uses: ibiqlik/action-yamllint@v3
      with:
        file_or_dir: kubernetes/
        config_file: .yamllint.yml

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v2

    - name: Validate Kustomize manifests
      run: |
        kustomize build kubernetes/overlays/staging > /dev/null
        kustomize build kubernetes/overlays/production > /dev/null
        echo "Kustomize validation passed"

  # Test jobs
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
      REDIS_URL: redis://localhost:6379/1
      SECRET_KEY: test-secret-key
      S3_BUCKET: test-bucket
      AWS_ACCESS_KEY_ID: test-key
      AWS_SECRET_ACCESS_KEY: test-secret

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ./services/worker-shared/
        pip install pytest pytest-asyncio pytest-mock pytest-cov httpx beautifulsoup4

    - name: Run unit tests
      run: |
        cd services/worker-shared
        python -m pytest tests/ -v --tb=short --cov=scraper_lib --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./services/worker-shared/coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000

    env:
      DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
      REDIS_URL: redis://localhost:6379/1
      S3_ENDPOINT_URL: http://localhost:9000
      S3_BUCKET: test-bucket
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      SECRET_KEY: test-secret-key

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ./services/worker-shared/
        pip install pytest pytest-asyncio pytest-mock httpx beautifulsoup4 boto3

    - name: Wait for services
      run: sleep 10

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short

  # Build and push Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate, unit-tests]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push images
      run: |
        export VERSION=${{ steps.meta.outputs.version }}
        export REGISTRY=${{ env.REGISTRY }}
        chmod +x ci/build-images.sh
        ./ci/build-images.sh --registry $REGISTRY --version $VERSION --push

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/api-server:${{ needs.build.outputs.version }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.k-scrape-nexus.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v2

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        kubectl config current-context

    - name: Deploy to staging
      run: |
        export VERSION=${{ needs.build.outputs.version }}
        chmod +x ci/deploy.sh
        ./ci/deploy.sh --environment staging --version $VERSION

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: production
      url: https://k-scrape-nexus.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v2

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        kubectl config current-context

    - name: Deploy to production
      run: |
        export VERSION=${{ needs.build.outputs.version }}
        chmod +x ci/deploy.sh
        ./ci/deploy.sh --environment production --version $VERSION

  # Performance testing (optional)
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup k6
      uses: grafana/setup-k6-action@v1

    - name: Run performance tests
      run: |
        cat > performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          stages: [
            { duration: '2m', target: 10 },
            { duration: '5m', target: 10 },
            { duration: '2m', target: 20 },
            { duration: '5m', target: 20 },
            { duration: '2m', target: 0 },
          ],
        };

        export default function () {
          let response = http.get('https://staging.k-scrape-nexus.com/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          sleep(1);
        }
        EOF
        k6 run performance-test.js