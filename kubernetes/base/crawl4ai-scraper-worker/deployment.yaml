apiVersion: apps/v1
kind: Deployment
metadata:
  name: crawl4ai-scraper-worker
  namespace: k-scrape-nexus
  labels:
    app.kubernetes.io/name: k-scrape-nexus
    app.kubernetes.io/component: crawl4ai-scraper-worker
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: k-scrape-nexus
      app.kubernetes.io/component: crawl4ai-scraper-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: k-scrape-nexus
        app.kubernetes.io/component: crawl4ai-scraper-worker
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: k-scrape-nexus
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: crawl4ai-scraper-worker
        image: k-scrape-nexus/crawl4ai-scraper-worker:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8080
          protocol: TCP
        env:
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: k-scrape-nexus-config
              key: APP_NAME
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: k-scrape-nexus-config
              key: LOG_LEVEL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: k-scrape-nexus-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: k-scrape-nexus-secrets
              key: redis-url
        - name: S3_BUCKET
          valueFrom:
            secretKeyRef:
              name: k-scrape-nexus-secrets
              key: s3-bucket
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: k-scrape-nexus-secrets
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: k-scrape-nexus-secrets
              key: aws-secret-access-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: k-scrape-nexus-secrets
              key: openai-api-key
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: k-scrape-nexus-secrets
              key: anthropic-api-key
              optional: true
        - name: QUEUE_SCRAPE_CRAWL4AI
          valueFrom:
            configMapKeyRef:
              name: k-scrape-nexus-config
              key: QUEUE_SCRAPE_CRAWL4AI
        - name: WORKER_CONCURRENCY
          valueFrom:
            configMapKeyRef:
              name: k-scrape-nexus-config
              key: WORKER_CONCURRENCY
        - name: RATE_LIMIT_ENABLED
          valueFrom:
            configMapKeyRef:
              name: k-scrape-nexus-config
              key: RATE_LIMIT_ENABLED
        - name: RATE_LIMIT_RPS
          valueFrom:
            configMapKeyRef:
              name: k-scrape-nexus-config
              key: RATE_LIMIT_RPS
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: k-scrape-nexus-config
              key: METRICS_ENABLED
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      terminationGracePeriodSeconds: 60
      restartPolicy: Always